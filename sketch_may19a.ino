#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>



Adafruit_PCD8544 display = Adafruit_PCD8544(13, 11, 4, 6, 5);

int x, y, x2, y2;
long rando;

const unsigned int easyTime = 7, mediumTime = 15;
const unsigned short maxAsteroids = 6;

const int multiplayer = 10;
const int p1Light = 8;
const int p2Light = 7;
const int diffLight1 = 9;
const int diffLight2 = 3;
const int diffLight3 = 2;
const int led1 = 12;
const int photoResistor = A5;

const int xAxis = A3;
const int yAxis = A2;
const int xAxis2 = A0;
const int yAxis2 = A1;
const int median = 512;

int rng(int low, int high) { //used to generate the speeds and positions of the asteroids,
  rando = (int(pow(low, 2)) + int(pow(high, 2)) * millis()) % map(analogRead(photoResistor), 0, 1023, 0, 123);
  rando = rando << 2;
  rando = rando % millis();
  rando *= 22 / 7;
  rando = millis() % rando;
  //Serial.println(rando);
  return (rando % (high+1)) + low;
}

// 'spaceship', 84x48px
const unsigned char spaceshipMap [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


const unsigned char AsteroidS [] PROGMEM = {
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


const unsigned char AsteroidM [] PROGMEM = {
  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


const unsigned char AsteroidL [] PROGMEM = {
  0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


const unsigned char GameOver [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0x88, 0x00, 0x7f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0xf8, 0x03, 
  0x81, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x78, 0x06, 0x00, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x06, 0x00, 0x38, 0x0c, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x18, 
  0x18, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x18, 0x38, 0x00, 0x30, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1c, 0x00, 0x08, 0x38, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 
  0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 
  0x01, 0xff, 0x70, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x7c, 0x70, 0x00, 0xf8, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x38, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x38, 0x00, 0x38, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x38, 0x38, 0x00, 
  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x38, 0x38, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0e, 0x00, 0x38, 0x1c, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x38, 0x0e, 
  0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x38, 0x07, 0x00, 0x70, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xe0, 0x78, 0x03, 0xc0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 
  0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char  *AsteroidSizes[3] = {AsteroidS, AsteroidM, AsteroidL};


unsigned char difficulty;
unsigned int count;
bool collide, p1Win, p2Win;

typedef struct asteroid{
  int x, y;
  int xspeed, yspeed;
  unsigned char asteroidSize;    //0 for small, 1, for medium, 2 for large
} asteroid;

asteroid objects[maxAsteroids];

bool checkTooFar(struct asteroid *asteroid, int x, int y, int dist){                                                     //checks if asteroid is further than given distance
  if( pow((pow((asteroid->x - x), 2) + pow((asteroid->y - y), 2)), 0.5) > dist){
    return true;
  }
  return false;
}

void setAsteroid(struct asteroid *asteroid, int x, int y, int xspeed, int yspeed, unsigned char asteroidSize){           //sets the asteroid to a specific position, speed, and size
  asteroid->x = x;
  asteroid->y = y;
  asteroid->xspeed = xspeed;
  asteroid->yspeed = yspeed;
  asteroid->asteroidSize = asteroidSize;
}

double calculateXSpeed(struct asteroid *asteroid, int x){
  /*if(asteroid->x < x){
    return pow(pow(asteroid->x - x, 2), 0.5);
  }
  else{
    return -1*pow(pow(asteroid->x - x, 2), 0.5);
  }*/
  if(asteroid->x < x){
    return (x - asteroid->x)/4;
  }
  else{
    return -1*(asteroid->x - x)/4;
  }
}

double calculateYSpeed(struct asteroid *asteroid, int y){
  /*if(asteroid->y < y){
    return pow(pow(asteroid->y - y, 2), 0.5);
  }
  else{
    return -1*pow(pow(asteroid->y - y, 2), 0.5);
  }*/
  if(asteroid->y < y){
    return (y - asteroid->y)/4;
  }
  else{
    return -1*(asteroid->y - y)/4;
  }
}

typedef struct task {
  int state;
  unsigned long period;
  unsigned long elapsedTime;
  int (*TickFct)(int);
} task;

int delay_gcd;
const unsigned short tasksNum = 4;
task tasks[tasksNum];

enum SM1_States {SM1_INIT, SM1_S0, SM1_S1, SM1_S2};                 //Spaceship
int SM1_Tick(int state) {
  //state actions
  switch (state) {
    case (SM1_INIT):
      {
        if (!digitalRead(multiplayer)) {
          state = SM1_S1;
        }
        else {
          state = SM1_S0;
        }
        break;
      }
    case (SM1_S0):      //one player
      {
        if(collide){
          state = SM1_S2;
        }
        break;
      }
    case (SM1_S1):      //two player
      {
        if(collide){
          state = SM1_S2;
          if(p1Win){
            digitalWrite(p1Light, HIGH);
          }
          if(p2Win){
            digitalWrite(p2Light, HIGH);
          }
        }
        break;
      }
    case (SM1_S2):      //game over
      {
        break;
      }
  }
  switch (state) {
    case (SM1_INIT):              //Reset
      {
        x = 0;
        y = 0;
        x2 = 0;
        y2 = 0;
        digitalWrite(p1Light, LOW);
        digitalWrite(p2Light, LOW);
        break;
      }
    case (SM1_S0):                //One Player
      {
        if (analogRead(xAxis) < median - 300) {
          if (x > -34) {
            x -= 3;
          }
        }
        if (analogRead(xAxis) > median) {
          if (x < 38) {
            x += 3;
          }
        }
        if (analogRead(yAxis) < median - 300) {
          if (y < 16) {
            y += 3;
          }
        }
        if (analogRead(yAxis) > median) {
          if (y > -20) {
            y -= 3;
          }
        }
        display.clearDisplay();
        display.drawBitmap(x, y, spaceshipMap, 84, 48, 1);
        display.display();
        break;
      }
    case (SM1_S1):                //Two player
      {
        if (analogRead(xAxis) < median - 300) {
          if (x > -34) {
            x -= 3;
          }
        }
        if (analogRead(xAxis) > median) {
          if (x < 38) {
            x += 3;
          }
        }
        if (analogRead(yAxis) < median - 300) {
          if (y < 16) {
            y += 3;
          }
        }
        if (analogRead(yAxis) > median) {
          if (y > -20) {
            y -= 3;
          }
        }

        if (analogRead(xAxis2) < median - 300) {
          if (x2 > -34) {
            x2 -= 3;
          }
        }
        if (analogRead(xAxis2) > median) {
          if (x2 < 38) {
            x2 += 3;
          }
        }

        if (analogRead(yAxis2) > median - 300) {
          if (y2 < 16) {
            y2 += 3;
          }
        }
        if (analogRead(yAxis2) < median) {
          if (y2 > -20) {
            y2 -= 3;
          }
        }
        display.clearDisplay();
        display.drawBitmap(x, y, spaceshipMap, 84, 48, 1);
        display.drawBitmap(x2, y2, spaceshipMap, 84, 48, 1);
        display.display();
        break;
      }
    case (SM1_S2):
      {
        display.clearDisplay();
        display.drawBitmap(0, 0, GameOver, 84, 48, 1);
        if(p1Win){

          digitalWrite(p1Light, HIGH);
        }
        if(p2Win){
          digitalWrite(p2Light, HIGH);
          
        }
        
        break;
      }
  }
  return state;
}


enum SM2_States {SM2_INIT, SM2_S0, SM2_S1};                 //Asteroids
int SM2_Tick(int state) {
  switch (state) {
    case SM2_INIT:
      for(int i=0; i<maxAsteroids; i++){
        setAsteroid(&objects[i], 100, 100, 0, 0, rng(0, 2));
      }
      for(int i=0; i<maxAsteroids; i++){
        if(i<2*difficulty){
          do{
            setAsteroid(&objects[i], rng(-30, 174), rng(-24, 96), 0, 0, rng(0, 2));
          }while(!checkTooFar(&objects[i], 42, 24, 50));
          setAsteroid(&objects[i], objects[i].x, objects[i].y, calculateXSpeed(&objects[i], rng(42, 42))/(7-(difficulty*2)), calculateYSpeed(&objects[i], rng(24, 24))/(7-(difficulty*2)), objects[i].asteroidSize);
        }
      }
      state = SM2_S0;
      break;
    case SM2_S0:
      if(collide){
        state = SM2_S1;
        for(int i=0; i<maxAsteroids; i++){
          setAsteroid(&objects[i], 100, 100, 0, 0, 0);
        }
      }
      break;
    case SM2_S1:
      break;
  }
  switch (state) {
    case SM2_INIT:                              //Setup
      
      break;
    case SM2_S0:                                //Moving

      for(int i=0; i<maxAsteroids; i++){
        if(i<2*difficulty){
          if (checkTooFar(&objects[i], 42, 24, 200)) {
            do{
              setAsteroid(&objects[i], rng(-30, 174), rng(-24, 96), 0, 0, rng(0, 2));
              
            }while(!checkTooFar(&objects[i], 42, 24, 50) /*&& checkTooFar(&objects[i], 42, 24, 70)*/);
            setAsteroid(&objects[i], objects[i].x, objects[i].y, calculateXSpeed(&objects[i], rng(42, 42))/(7-(difficulty*2)), calculateYSpeed(&objects[i], rng(24, 24))/(7-(difficulty*2)), objects[i].asteroidSize);
          }
        }
        objects[i].y += objects[i].yspeed;
        objects[i].x += objects[i].xspeed;

         /*
        Serial.println(i);
        Serial.println(objects[i].x);
        Serial.println(objects[i].y);
        Serial.println(objects[i].xspeed);
        Serial.println(objects[i].yspeed);
        Serial.println(" ");*/
        //Serial.println(rng(0,2));
        
        display.drawBitmap(objects[i].x, objects[i].y, AsteroidSizes[objects[i].asteroidSize], 84, 48, 1);
        display.display();
      }
      break;
    case SM2_S1:                                //Win/Lose
      
      display.display();
      break;
  }
  return state;
}


enum SM3_States {SM3_INIT, SM3_S0, SM3_S1, SM3_S2};                 //Collision Check
int SM3_Tick(int state) {
  switch (state) {
    case SM3_INIT:
      if(!digitalRead(multiplayer)){
        state = SM3_S1;
      }
      else{
        state = SM3_S0;
      }
      break;
    case SM3_S0:
      if(collide){
        state = SM3_S2;
      }
      break;
    case SM3_S1:
      if(collide){
        state = SM3_S2;
      }
      break;
    case SM3_S2:
      break;
  }
  switch (state) {
    case SM3_INIT:
      break;
    case SM3_S0:
      for(int i=0; i<maxAsteroids; i++){  
        if(objects[i].asteroidSize == 0){       //small
          if(objects[i].x - (x+38) >= -1 && objects[i].x - (x+38) <= 6 ){
            if(objects[i].y - (y+22) >= -1 && objects[i].y - (y+22) <= 5){
              collide = true;
            }
          }
        }
        if(objects[i].asteroidSize == 1){       //medium
          if(objects[i].x - (x+38) >= -4 && objects[i].x - (x+38) <= 6 ){
            if(objects[i].y - (y+22) >= -4 && objects[i].y - (y+22) <= 5){
              collide = true;
            }
          }
        }
        if(objects[i].asteroidSize == 2){       //large
          if(objects[i].x - (x+38) >= -6 && objects[i].x - (x+38) <= 6 ){
            if(objects[i].y - (y+22) >= -5 && objects[i].y - (y+22) <= 5){
              collide = true;
            }
          }
        }
      }
      break;
      
    case SM3_S1:
      for(int i=0; i<maxAsteroids; i++){  
        if(objects[i].asteroidSize == 0){       //small
          if(objects[i].x - (x+38) >= -1 && objects[i].x - (x+38) <= 6 ){
            if(objects[i].y - (y+22) >= -1 && objects[i].y - (y+22) <= 5){
              collide = true;
              p2Win = true;
            }
          }
          if(objects[i].x - (x2+38) >= -1 && objects[i].x - (x2+38) <= 6 ){
            if(objects[i].y - (y2+22) >= -1 && objects[i].y - (y2+22) <= 5){
              collide = true;
              p1Win = true;
            }
          }
        }
        if(objects[i].asteroidSize == 1){       //medium
          if(objects[i].x - (x+38) >= -4 && objects[i].x - (x+38) <= 6 ){
            if(objects[i].y - (y+22) >= -4 && objects[i].y - (y+22) <= 5){
              collide = true;
              p2Win = true;
            }
          }
          if(objects[i].x - (x2+38) >= -4 && objects[i].x - (x2+38) <= 6 ){
            if(objects[i].y - (y2+22) >= -4 && objects[i].y - (y2+22) <= 5){
              collide = true;
              p1Win = true;
            }
          }
        }
        if(objects[i].asteroidSize == 2){       //large
          if(objects[i].x - (x+38) >= -6 && objects[i].x - (x+38) <= 6 ){
            if(objects[i].y - (y+22) >= -5 && objects[i].y - (y+22) <= 5){
              collide = true;
              p2Win = true;
            }
          }
          if(objects[i].x - (x2+38) >= -6 && objects[i].x - (x2+38) <= 6 ){
            if(objects[i].y - (y2+22) >= -5 && objects[i].y - (y2+22) <= 5){
              collide = true;
              p1Win = true;
            }
          }
        }
      }
      break;
    case SM3_S2:
      
      break;
  }
  return state;
}


enum SM4_States {SM4_INIT, SM4_S0, SM4_S1, SM4_S2, SM4_S3};            //Difficulty changer
int SM4_Tick(int state){
  switch(state){
    case SM4_INIT:
      state = SM4_S0;
      digitalWrite(diffLight1, HIGH);
      digitalWrite(diffLight2, LOW);
      digitalWrite(diffLight3, LOW);
      count = 0;
      break;
    case SM4_S0:
      if(collide){
        state = SM4_S3;
      }
      if(count > easyTime){
        state = SM4_S1;
        digitalWrite(diffLight1, HIGH);
        digitalWrite(diffLight2, HIGH);
        digitalWrite(diffLight3, LOW);
      }
      break;
    case SM4_S1:
      if(collide){
        state = SM4_S3;
      }
      if(count > mediumTime){
        state = SM4_S2;
        digitalWrite(diffLight1, HIGH);
        digitalWrite(diffLight2, HIGH);
        digitalWrite(diffLight3, HIGH);
      }
      break;
    case SM4_S2:
      if(collide){        ////////switch back to init on reset
        state = SM4_S3;
      }
      break;
    case SM4_S3:
      break;
  }
  switch(state){
    case SM4_INIT:
      difficulty = 1;
      break;
    case SM4_S0:
      difficulty = 1;
      count++;
      break;
    case SM4_S1:
      difficulty = 2;
      count++;
      break;
    case SM4_S2:
      difficulty = 3;
      count++;
      break;
    case SM4_S3:
      break;
  }
  return state;
}




void setup() {
  Serial.begin(9600);
  // put your setup code here, to run once:

  randomSeed(analogRead(4));
  difficulty = 1;
  collide = false;

  pinMode(led1, OUTPUT);
  pinMode(multiplayer, INPUT);
  pinMode(p1Light, OUTPUT);
  pinMode(p2Light, OUTPUT);
  pinMode(diffLight1, OUTPUT);
  pinMode(diffLight2, OUTPUT);
  pinMode(diffLight3, OUTPUT);

  
  for(int i=0; i<maxAsteroids; i++){
    objects[i].x = 1000;
    objects[i].y = 1000;
    objects[i].xspeed = 0;
    objects[i].yspeed = 0;
    objects[i].asteroidSize = i%3;
  }
  
  tasks[0].state = SM1_INIT;
  tasks[0].period = 50;
  tasks[0].elapsedTime = 0;
  tasks[0].TickFct = &SM1_Tick;

  tasks[1].state = SM2_INIT;
  tasks[1].period = 100;
  tasks[1].elapsedTime = 0;
  tasks[1].TickFct = &SM2_Tick;

  tasks[2].state = SM3_INIT;
  tasks[2].period = 50;
  tasks[2].elapsedTime = 0;
  tasks[2].TickFct = &SM3_Tick;

  tasks[3].state = SM4_INIT;
  tasks[3].period = 1000;
  tasks[3].elapsedTime = 0;
  tasks[3].TickFct = &SM4_Tick;
  
  display.begin();
  display.setContrast(50);
  display.clearDisplay();
  /*display.setTextSize(1);
    display.setTextColor(BLACK);
    display.setCursor(10,10);
    display.println("Welcome!");
    display.display();*/
}

void loop() {
  // put your main code here, to run repeatedly:
  unsigned char i;
  for (i = 0; i < tasksNum; ++i) {
    if ( (millis() - tasks[i].elapsedTime) >= tasks[i].period) {
      tasks[i].state = tasks[i].TickFct(tasks[i].state);
      tasks[i].elapsedTime = millis(); // Last time this task was ran
    }
  }
}
